%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sorts

#class = {jet, bird, eagle, robin, baldeagle, passengerjet}.
#object = {jo,blackbird,boeing747,murica}.
%allows it to reference object or class
% #objectandclass = #class+#object

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicates

is_subclass(#class,#class).
subclass(#class,#class).
is_a(#object,#class).
member(#object,#class).
siblings(#class,#class).
is_faster(#class,#class).
faster(#object,#object).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rules

is_subclass(eagle,bird).
is_subclass(robin,bird).
is_subclass(baldeagle,eagle).
is_subclass(passengerjet,jet).


%% Subclass Relation:
subclass(C1,C2) :- is_subclass(C1,C2).

subclass(C1,C2) :- is_subclass(C1,C3),
                   subclass(C3,C2).

-subclass(C1,C2) :- not subclass(C1,C2).
                    
is_a(blackbird,jet).
is_a(jo,robin).
is_a(murica,baldeagle).
is_a(boeing747,passengerjet).

%% Class Membership:
member(X,C) :- is_a(X,C).
member(X,C) :- is_a(X,C0),
               subclass(C0,C).
               
member(jo,robin).
member(blackbird,jet).

siblings(C1,C2) :- is_subclass(C1,C),
                   is_subclass(C2,C),
                   C1 != C2.
                   
-member(X,C2) :- member(X,C1),
                 siblings(C1,C2),
                 C1 != C2.

% Faster hierarchy
is_faster(jet,bird).

faster(X,Y) :- member(X,C1),
               member(Y,C2),
               is_faster(C1,C2).


% -faster(X,Y) :- faster(Y,X).
% faster(X,Y) :- faster(X,Z),
%		 faster(Z,Y).

               
               %%there exists an eagle clause. Not exactly what you wanted but it now knows murica is faster than jo%%
is_faster(eagle,robin) :- member(X,eagle).               

% Professors implementation		
% faster(murica,Y) :- member(Y,robin).
